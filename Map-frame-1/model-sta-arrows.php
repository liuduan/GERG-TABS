<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml">
  <head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8"/>
<title>Model Stations</title>
<link href="http://code.google.com/apis/maps/documentation/javascript/examples/default.css" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
  </head>
  
  <body bgcolor="#C0C0C0">
  
  
  
  
<?php

// This PHP script takes data that derived from a NetCDF file and generate arrows for each station as model prediction. 
// The NetCDF is from Dr. Rob Hetland's lab, and generated by Dr. Steve Paul. 


// use file() to put entire file into an array.
$lines = file('http://tabs1.gerg.tamu.edu/tglo/testpages/Map-frame-1/latest_obs.txt');
$model_lines = file('/home/liuduan/testpages/Python/NetCDF/model-value.txt');

# phpinfo();
echo 'count($lines) = '.count($lines).'<br>';

for ($n = 0; $n <= count($lines); $n++){
	if (substr($lines[$n], 7, 3) == "ven"){					# only draw the current.
			for ($m = 0; $m <= count($model_lines); $m++){
				if (strcmp( substr($lines[$n], 0, 25), substr($model_lines[$m], 0, 25)) == 0){
					echo '<br> The $model_lines: '. $model_lines[$m];
					echo '<br> The buoy $lines a:  '. $lines[$n];
					echo '<br>';
					
					
					# $pieces = explode(" ", $pizza);

					$model_values = explode(", ", $model_lines[$m]); 
					$u[$model_values[0]] = substr($model_values[2], 3);
					$v[$model_values[0]] = substr($model_values[3], 3);
					echo 'u, v vlues are: '. $u[$model_values[0]]. $v[$model_values[0]];
					break;
					}	#end of if 
				}	#end of while
		}    //end of if "ven"
	}	//end of for
print_r($u);
print_r($v);







// Create a 55x30 image
echo "started, <br/>";

$im = imagecreatetruecolor(2500, 2084);
$white = imagecolorallocate($im, 255, 255, 255);
$black = imagecolorallocate($im, 0, 0, 0);

// Make the background transparent
imagecolortransparent($im, $black);

// This function makes an arrow.
function arrow($im, $x1, $y1, $x2, $y2, $alength, $awidth, $color) {
    $distance = sqrt(pow($x1 - $x2, 2) + pow($y1 - $y2, 2));

	//echo '; $distance: '. $distance. '<br>';
	if ($distance == 0){$distance = 0.000001; }

    $dx = $x2 + ($x1 - $x2) * $alength / $distance;
    $dy = $y2 + ($y1 - $y2) * $alength / $distance;

    $k = $awidth / $alength;

    $x2o = $x2 - $dx;
    $y2o = $dy - $y2;

    $x3 = $y2o * $k + $dx;
    $y3 = $x2o * $k + $dy;

    $x4 = $dx - $y2o * $k;
    $y4 = $dy - $x2o * $k;

    imageline($im, $x1, $y1, $dx, $dy, $color);
	   for ($count =-5; $count <=5; $count++){
        imageline($im, $x1+$count, $y1, $dx+$count, $dy, $color);
		imageline($im, $x1, $y1+$count, $dx, $dy+$count, $color);
       }
    imagefilledpolygon($im, array($x2, $y2, $x3, $y3, $x4, $y4), 3, $color);
}		//The end of the function arrow()










function Retrieve_Data_Draw_Line($Table_Name, $x_position, $y_position, $im, $color){

	##### The following draw an arrow; also write the latest observation to latest_obs.txt file.
	$x1=$x_position;
	$y1=$y_position;

	global $fp, $u, $v, $scale_factor;

	$row[veast] = $u[$Table_Name]*100;
	$row[vnorth] = $v[$Table_Name]*100;

	if ($scale_factor == 0.5){
		$row[veast]= "$row[veast]" * 0.5;
		$row[vnorth] = "$row[vnorth]" * 0.5;}	
	else {$row[veast]= "$row[veast]" * 1;
		$row[vnorth] = "$row[vnorth]" * 1;}	
		$x2 = $x1 + $row[veast]*150/50*2*2;
		$y2 = $y1 - $row[vnorth]*150/50*2*2;
	
	// Draw arrows.
	arrow($im, $x1, $y1, $x2, $y2, 80, 20, $color);

	//save the image, the model_stations.png
	echo '<br />ready to write <br/>';
	imagepng($im, "/home/liuduan/testpages/Map-frame-1/model_stations.png");   

	// save data to file latest_obs.txt

}		//The end of the function Retrieve-Data-Draw-Line ()




function Total_current($Table_Name){
	# Get resource ID for retrieving data.
	$result = mysql_query("SELECT * FROM $Table_Name ORDER BY obs_time DESC limit 1");

	# Get one row of data.
	$row = mysql_fetch_array($result, MYSQL_BOTH);
  
	mysql_free_result($result);

	global $total_current;
	$total_current = $total_current + abs("$row[vnorth]") + abs("$row[veast]");
}		//The end of the function Retrieve-Data-Draw-Line ()



# ##### Connecting to tabs.

$dbhost = 'localhost';
$dbuser = 'tabsweb';
$dbpass = 'tabs';
$conn = mysql_connect($dbhost, $dbuser, $dbpass);
if(! $conn )
{
  die('Could not connect: ' . mysql_error());
}
echo 'Connected successfully<br />';

# Select database.
$sql = 'use tabsdb';
$retval = mysql_query($sql);
if(! $retval )
{
  die('Could not change database:' . mysql_error());
}
 echo "Database changed successfully<br />";


$total_current = 0;

Total_current("tabs_B_ven");
Total_current("tabs_D_ven");
Total_current("tabs_F_ven");
Total_current("tabs_J_ven");
Total_current("tabs_K_ven");
Total_current("tabs_N_ven");
Total_current("tabs_V_ven");
Total_current("tabs_W_ven");

echo '$total_current = '. $total_current. '<br>';
if ($total_current > 240){$scale_factor = 0.5;}
else $scale_factor = 1;

echo '$scale_factor = '. $scale_factor. '<br>';

// The order of the data table must be the same as in Map-frame-1.php line 203-247, because the lastest_obs.txt file is written here, which feed the data into Map-frame-1.php fuction Retrieve_Show_Data(). 

Retrieve_Data_Draw_Line("tabs_B_ven", (673-2)*2, 2*(302-5), $im, $white);
Retrieve_Data_Draw_Line("tabs_D_ven", 724, 969, $im, $white);
Retrieve_Data_Draw_Line("tabs_F_ven", 1561, 649, $im, $white);
Retrieve_Data_Draw_Line("tabs_J_ven", 656, 1607, $im, $white);
Retrieve_Data_Draw_Line("tabs_K_ven", (414+2)*2, 2*(802-4), $im, $white);
Retrieve_Data_Draw_Line("tabs_N_ven", 812*2, 2*498, $im, $white);
Retrieve_Data_Draw_Line("tabs_R_ven", 875*2, 364, $im, $white);
Retrieve_Data_Draw_Line("tabs_V_ven", (879+2)*2, 2*(499-6), $im, $white);
Retrieve_Data_Draw_Line("tabs_W_ven", 995, 2*(415-2), $im, $white);
Retrieve_Data_Draw_Line("tabs_X_ven", 880, 1290, $im, $white);

//echo "<img src=./background.png />";

imagedestroy($im);


?>
  
<img src="model_stations.png" width = 700/>
  
  


  </body>
</html>
